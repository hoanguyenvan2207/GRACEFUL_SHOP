package com.example.datn_be.service.sanpham;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class ChatGeminiService {
    private static final String GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-001:generateContent";
    private static final String GEMINI_API_KEY = "AIzaSyADle3z5HuxqqA35yGhHZioq-JiVOuYPVs";

    @Autowired
    private SanPhamService sanPhamService; // Service ƒë·ªÉ l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m

    private final ObjectMapper objectMapper = new ObjectMapper();

    public String askGemini(String prompt) {
        try {
            return callGeminiAPI(prompt);
        } catch (Exception e) {
            e.printStackTrace();
            return "L·ªói khi g·ªçi API Gemini: " + e.getMessage();
        }
    }

    public String getProductAdvice(String customerQuery) {
        try {
            // 1. L·∫•y nguy√™n list products v√† topSellingProducts
            List<Map<String, Object>> products         = sanPhamService.getAllProducts();
            List<Map<String, Object>> topSellingProducts = sanPhamService.getTopProductsSale();

            // 2. R√∫t g·ªçn products
            List<Map<String, Object>> minimalProducts = products.stream()
                    .map(prod -> {
                        Map<String, Object> m = new HashMap<>();
                        m.put("maAoDai",      prod.get("maAoDai"));
                        m.put("tenAoDai",     prod.get("tenAoDai"));
                        m.put("tenChatLieu",  prod.get("tenChatLieu"));
                        m.put("tenLoaiAoDai", prod.get("tenLoaiAoDai"));
                        m.put("anhList",      prod.get("anhList"));

                        @SuppressWarnings("unchecked")
                        List<Map<String, Object>> spctList = ((List<Map<String, Object>>) prod.get("sanPhamChiTietList"))
                                .stream()
                                .map(spct -> {
                                    Map<String, Object> s = new HashMap<>();
                                    s.put("tenMauSac",          spct.get("tenMauSac"));
                                    s.put("tenKichThuoc",       spct.get("tenKichThuoc"));
                                    s.put("maKhuyenMai",        spct.get("maKhuyenMai"));
                                    s.put("ngayBatDau",         spct.get("ngayBatDau"));
                                    s.put("ngayKetThuc",        spct.get("ngayKetThuc"));
                                    s.put("trangThaiKhuyenMai", spct.get("trangThaiKhuyenMai"));
                                    return s;
                                })
                                .collect(Collectors.toList());
                        m.put("sanPhamChiTietList", spctList);

                        return m;
                    })
                    .collect(Collectors.toList());

            // 3. R√∫t g·ªçn topSellingProducts t∆∞∆°ng t·ª±
            List<Map<String, Object>> minimalTopSelling = topSellingProducts.stream()
                    .map(prod -> {
                        Map<String, Object> m = new HashMap<>();
                        m.put("maAoDai",      prod.get("maAoDai"));
                        m.put("tenAoDai",     prod.get("tenAoDai"));
                        m.put("tenChatLieu",  prod.get("tenChatLieu"));
                        m.put("tenLoaiAoDai", prod.get("tenLoaiAoDai"));
                        m.put("anhList",      prod.get("anhList"));

                        @SuppressWarnings("unchecked")
                        List<Map<String, Object>> spctList = ((List<Map<String, Object>>) prod.get("sanPhamChiTietList"))
                                .stream()
                                .map(spct -> {
                                    Map<String, Object> s = new HashMap<>();
                                    s.put("tenMauSac",          spct.get("tenMauSac"));
                                    s.put("tenKichThuoc",       spct.get("tenKichThuoc"));
                                    s.put("giaGoc",             spct.get("giaGoc"));
                                    s.put("giaBan",             spct.get("giaBan"));
                                    s.put("maKhuyenMai",        spct.get("maKhuyenMai"));
                                    s.put("ngayBatDau",         spct.get("ngayBatDau"));
                                    s.put("ngayKetThuc",        spct.get("ngayKetThuc"));
                                    s.put("trangThaiKhuyenMai", spct.get("trangThaiKhuyenMai"));
                                    return s;
                                })
                                .collect(Collectors.toList());
                        m.put("sanPhamChiTietList", spctList);

                        return m;
                    })
                    .collect(Collectors.toList());

            // 4. Chuy·ªÉn sang JSON v√† t·∫°o prompt cho Gemini
            String productsJson       = objectMapper.writeValueAsString(minimalProducts);
            String topSellingJson     = objectMapper.writeValueAsString(minimalTopSelling);
            String prompt             = createProductAdvicePrompt(productsJson, topSellingJson, customerQuery);

            // 5. G·ªçi API Gemini
            return callGeminiAPI(prompt);

        } catch (Exception e) {
            e.printStackTrace();
            return "L·ªói khi t∆∞ v·∫•n s·∫£n ph·∫©m: " + e.getMessage();
        }
    }

    private String createProductAdvicePrompt(String productsJson, String productTopsale, String customerQuery) {
        return "üåü Ch√†o m·ª´ng ƒë·∫øn v·ªõi Graceful! üåü\n" +
                "B·∫°n y√™u qu√Ω ∆°i, h√£y h√≥a th√¢n th√†nh m·ªôt chuy√™n gia √°o d√†i c√≥ t√¢m ‚Äì c√≥ t·∫ßm ‚Äì l·∫°i h√†i h∆∞·ªõc, d·ªÖ th∆∞∆°ng ki·ªÉu 'Graceful' nha! üòâ\n\n" +
                "D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c m·∫´u √°o d√†i hi·ªán c√≥ tr√™n website Graceful:\n" +
                productsJson + "\n\n" +
                "üî• Top 5 m·∫´u 'b√°n ch·∫°y' nh·∫•t:\n" +
                productTopsale + "\n\n" +
                "C√¢u h·ªèi c·ªßa kh√°ch h√†ng v·ªÅ m·∫´u √°o d√†i: \"" + customerQuery + "\" üí≠\n\n" +
                "V·ªõi con m·∫Øt fashion 'th·∫ßn s·∫ßu', h√£y g·ª£i √Ω t∆∞ v·∫•n m·ªôt v√†i m·∫´u ph√π h·ª£p theo ƒë·ªãnh d·∫°ng sau (t·ªïng d∆∞·ªõi 300 k√Ω t·ª±, tr√¨nh b√†y HTML m∆∞·ª£t m√†, kh√¥ng div/table/** nha):\n\n" +
                " üìå <b>B·ªë c·ª•c m√¥ t·∫£ s·∫£n ph·∫©m:</b>\n" +
                "-üëö <b>M√£ s·∫£n ph·∫©m - T√™n s·∫£n ph·∫©m</b> l√† √°o d√†i <i>{t√™n lo·∫°i √°o d√†i}</i> v·ªõi ch·∫•t li·ªáu <i>{t√™n ch·∫•t li·ªáu}</i> ƒë·∫πp mi·ªÖn ch√™ lun ·∫° üòç<br>\n" +
                "-üé® M√†u s·∫Øc: ‚Äì üìè K√≠ch th∆∞·ªõc <br>\n" +
                "-üñºÔ∏è ·∫¢nh s·∫£n ph·∫©m: 1‚Äì2 ·∫£nh s·∫£n ph·∫©m minh h·ªça<br>\n" +
                "-üíµ Gi√° b√°n: gi√° th·∫•p nh·∫•t - gi√° cao nh·∫•t<br>\n" +
                "-üîó <a href=\"/san-pham/{id}\">Xem s·∫£n ph·∫©m</a><br>\n" +
                "‚ú® ∆Øu ti√™n g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p v·ªõi c√¢u h·ªèi c·ªßa kh√°ch h√†ng. N·∫øu c√≥ khuy·∫øn m√£i ƒëang ho·∫°t ƒë·ªông (ngayBatDau, ngayKetThuc, trangThaiKhuyenMai == true), th√¨ kh√©o l√©o r·ªß r√™ kh√°ch nha!\n" +
                "üíñ ƒê·ª´ng qu√™n gi·ªØ vƒÉn phong d·ªÖ th∆∞∆°ng, x√¨ tin, th√™m emoji, icon ƒë·ªÉ tƒÉng 'duy√™n d√°ng'. H·∫°n ch·∫ø d√πng <br> qu√° nhi·ªÅu d√≤ng.\n\n" +
                "üíå Graceful lu√¥n ƒë·ªìng h√†nh ƒë·ªÉ b·∫°n ch·ªçn ƒë∆∞·ª£c chi·∫øc √°o d√†i 'ch√¢n √°i' c·ªßa m√¨nh! üå∏";
    }


    private String callGeminiAPI(String prompt) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            // T·∫°o JSON body
            JSONObject textPart = new JSONObject();
            textPart.put("text", prompt);

            JSONArray partsArray = new JSONArray();
            partsArray.put(textPart);

            JSONObject contentObject = new JSONObject();
            contentObject.put("parts", partsArray);

            JSONArray contentsArray = new JSONArray();
            contentsArray.put(contentObject);

            JSONObject body = new JSONObject();
            body.put("contents", contentsArray);

            // Th√™m c·∫•u h√¨nh ƒë·ªÉ x·ª≠ l√Ω prompt d√†i h∆°n
            body.put("generationConfig", new JSONObject()
                    .put("maxOutputTokens", 4096)
                    .put("temperature", 0.2)
                    .put("topP", 0.8)
                    .put("topK", 40));

            HttpEntity<String> request = new HttpEntity<>(body.toString(), headers);
            RestTemplate restTemplate = new RestTemplate();

            // G·ª≠i request ƒë·∫øn API Gemini
            ResponseEntity<String> response = restTemplate.exchange(
                    GEMINI_API_URL + "?key=" + GEMINI_API_KEY,
                    HttpMethod.POST,
                    request,
                    String.class
            );

            String responseBody = response.getBody();

            // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ API Gemini
            JSONObject responseObject = new JSONObject(responseBody);

            JSONArray candidates = responseObject.getJSONArray("candidates");
            if (candidates.length() > 0) {
                JSONObject firstCandidate = candidates.getJSONObject(0);
                if (firstCandidate.has("content")) {
                    JSONObject content = firstCandidate.getJSONObject("content");
                    if (content.has("parts")) {
                        JSONArray parts = content.getJSONArray("parts");
                        if (parts.length() > 0) {
                            JSONObject firstPart = parts.getJSONObject(0);
                            if (firstPart.has("text")) {
                                return firstPart.getString("text");
                            }
                        }
                    }
                }
            }

            return "Kh√¥ng t√¨m th·∫•y n·ªôi dung ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Gemini.";

        } catch (Exception e) {
            e.printStackTrace();
            return "L·ªói khi g·ªçi API Gemini: " + e.getMessage();
        }
    }
}